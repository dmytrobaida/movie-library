generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id String @id @default(uuid())

  title    String
  parseUrl String @unique

  urls MediaUrl[]

  metadata        MediaMetadata? @relation(fields: [mediaMetadataId], references: [id])
  mediaMetadataId String?
}

model Show {
  id String @id @default(uuid())

  title    String
  parseUrl String @unique

  seasons ShowSeason[]

  metadata        MediaMetadata? @relation(fields: [mediaMetadataId], references: [id])
  mediaMetadataId String?
}

model ShowSeason {
  id String @id @default(uuid())

  title        String
  seasonNumber Int
  parseUrl     String @unique

  episodes ShowEpisode[]

  Show   Show?   @relation(fields: [showId], references: [id])
  showId String?
}

model ShowEpisode {
  id String @id @default(uuid())

  episodeNumber Int

  urls MediaUrl[]

  ShowSeason   ShowSeason? @relation(fields: [showSeasonId], references: [id])
  showSeasonId String?
}

model MediaMetadata {
  id String @id @default(uuid())

  year          Int
  posterUrl     String
  description   String
  originalTitle String
  releaseDate   DateTime
  country       String
  imdbId        String?

  Movie Movie[]
  Show  Show[]
}

model MediaUrl {
  id String @id @default(uuid())

  name String
  url  String

  Movie   Movie?  @relation(fields: [movieId], references: [id])
  movieId String?

  ShowEpisode   ShowEpisode? @relation(fields: [showEpisodeId], references: [id])
  showEpisodeId String?
}

model HtmlFetch {
  id String @id @default(uuid())

  url    String @unique
  result String
}
